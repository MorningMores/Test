name: CI - Frontend & Backend Tests with Docker

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  FRONTEND_COVERAGE_THRESHOLD: 90
  BACKEND_COVERAGE_THRESHOLD: 85

jobs:
  # ========================================
  # FRONTEND TESTS (Nuxt 4 + Vitest)
  # ========================================
  frontend-tests:
    name: Frontend Tests & Coverage
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./main_frontend/concert1
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './main_frontend/concert1/package-lock.json'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üß™ Run tests with coverage
        run: npm test -- --coverage --reporter=verbose
        continue-on-error: true

      - name: üìä Check coverage thresholds
        id: coverage-check
        run: |
          npm test -- --coverage > coverage-output.txt 2>&1 || true
          
          # Extract coverage percentages
          BRANCHES=$(grep "All files" coverage-output.txt | awk '{print $6}' | tr -d '%' || echo "0")
          STATEMENTS=$(grep "All files" coverage-output.txt | awk '{print $4}' | tr -d '%' || echo "0")
          FUNCTIONS=$(grep "All files" coverage-output.txt | awk '{print $8}' | tr -d '%' || echo "0")
          
          echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
          echo "statements=$STATEMENTS" >> $GITHUB_OUTPUT
          echo "functions=$FUNCTIONS" >> $GITHUB_OUTPUT
          
          echo "üìä Coverage Results:"
          echo "- Branches: $BRANCHES%"
          echo "- Statements: $STATEMENTS%"
          echo "- Functions: $FUNCTIONS%"
          
          # Check if coverage meets thresholds
          if (( $(echo "$BRANCHES < $FRONTEND_COVERAGE_THRESHOLD" | bc -l) )); then
            echo "‚ö†Ô∏è Branch coverage ($BRANCHES%) is below threshold ($FRONTEND_COVERAGE_THRESHOLD%)"
            echo "coverage_passed=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Coverage meets thresholds"
            echo "coverage_passed=true" >> $GITHUB_OUTPUT
          fi

      - name: üì§ Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage-report
          path: ./main_frontend/concert1/coverage/
          retention-days: 30

      - name: üí¨ Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const branches = '${{ steps.coverage-check.outputs.branches }}';
            const statements = '${{ steps.coverage-check.outputs.statements }}';
            const functions = '${{ steps.coverage-check.outputs.functions }}';
            const threshold = '${{ env.FRONTEND_COVERAGE_THRESHOLD }}';
            
            const body = `## üìä Frontend Test Coverage Report
            
            | Metric | Coverage | Status |
            |--------|----------|--------|
            | Branches | ${branches}% | ${branches >= threshold ? '‚úÖ' : '‚ö†Ô∏è'} |
            | Statements | ${statements}% | ${statements >= 90 ? '‚úÖ' : '‚ö†Ô∏è'} |
            | Functions | ${functions}% | ${functions >= 90 ? '‚úÖ' : '‚ö†Ô∏è'} |
            
            **Target**: ${threshold}% branch coverage
            ${branches < threshold ? `\n‚ö†Ô∏è **Branch coverage needs improvement!** (+${(threshold - branches).toFixed(2)}% needed)` : '\n‚úÖ **Coverage meets requirements!**'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: ‚ùå Fail if coverage below threshold
        if: steps.coverage-check.outputs.coverage_passed == 'false'
        run: |
          echo "::error::Branch coverage is below ${{ env.FRONTEND_COVERAGE_THRESHOLD }}%"
          echo "Current: ${{ steps.coverage-check.outputs.branches }}%"
          echo "Required: ${{ env.FRONTEND_COVERAGE_THRESHOLD }}%"
          echo "Please add more tests to improve coverage."
          exit 1

  # ========================================
  # BACKEND TESTS (Spring Boot + JaCoCo)
  # ========================================
  backend-tests:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./main_backend
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: concert_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: üê≥ Setup Docker for Testcontainers
        run: |
          docker --version
          docker-compose --version

      - name: üì¶ Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: üß™ Run tests with coverage
        run: |
          mvn -DforkCount=1 -DreuseForks=false \
              -Dspring.profiles.active=test \
              clean test jacoco:report
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/concert_test
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpassword

      - name: üìä Extract coverage metrics
        id: backend-coverage
        run: |
          # Parse JaCoCo XML report
          if [ -f target/site/jacoco/jacoco.xml ]; then
            INSTRUCTIONS=$(grep -oP '(?<=<counter type="INSTRUCTION" missed=")[0-9]+' target/site/jacoco/jacoco.xml | head -1)
            BRANCHES=$(grep -oP '(?<=<counter type="BRANCH" missed=")[0-9]+' target/site/jacoco/jacoco.xml | head -1)
            
            # Calculate percentages from JaCoCo CSV for better accuracy
            if [ -f target/site/jacoco/jacoco.csv ]; then
              BRANCH_PERCENT=$(tail -n 1 target/site/jacoco/jacoco.csv | cut -d',' -f10)
              INSTRUCTION_PERCENT=$(tail -n 1 target/site/jacoco/jacoco.csv | cut -d',' -f4)
              
              echo "instructions=$INSTRUCTION_PERCENT" >> $GITHUB_OUTPUT
              echo "branches=$BRANCH_PERCENT" >> $GITHUB_OUTPUT
              
              echo "üìä Backend Coverage Results:"
              echo "- Instructions: $INSTRUCTION_PERCENT%"
              echo "- Branches: $BRANCH_PERCENT%"
              
              # Check threshold
              if (( $(echo "$BRANCH_PERCENT < $BACKEND_COVERAGE_THRESHOLD" | bc -l) )); then
                echo "‚ö†Ô∏è Backend coverage below threshold"
                echo "coverage_passed=false" >> $GITHUB_OUTPUT
              else
                echo "‚úÖ Backend coverage meets threshold"
                echo "coverage_passed=true" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "‚ùå Coverage report not found"
            exit 1
          fi

      - name: üì§ Upload backend coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage-report
          path: ./main_backend/target/site/jacoco/
          retention-days: 30

      - name: üì§ Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: ./main_backend/target/surefire-reports/
          retention-days: 30

      - name: üí¨ Comment backend coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const instructions = '${{ steps.backend-coverage.outputs.instructions }}';
            const branches = '${{ steps.backend-coverage.outputs.branches }}';
            const threshold = '${{ env.BACKEND_COVERAGE_THRESHOLD }}';
            
            const body = `## üìä Backend Test Coverage Report
            
            | Metric | Coverage | Status |
            |--------|----------|--------|
            | Instructions | ${instructions}% | ${instructions >= 90 ? '‚úÖ' : '‚ö†Ô∏è'} |
            | Branches | ${branches}% | ${branches >= threshold ? '‚úÖ' : '‚ö†Ô∏è'} |
            
            **Target**: ${threshold}% branch coverage
            ${branches < threshold ? `\n‚ö†Ô∏è **Coverage needs improvement!** (+${(threshold - branches).toFixed(2)}% needed)` : '\n‚úÖ **Coverage meets requirements!**'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: ‚ùå Fail if coverage below threshold
        if: steps.backend-coverage.outputs.coverage_passed == 'false'
        run: |
          echo "::error::Backend coverage is below ${{ env.BACKEND_COVERAGE_THRESHOLD }}%"
          exit 1

  # ========================================
  # DOCKER BUILD & INTEGRATION TEST
  # ========================================
  docker-integration:
    name: Docker Build & Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîß Create .env file
        run: |
          cat > .env << EOF
          MYSQL_ROOT_PASSWORD=rootpassword
          MYSQL_DATABASE=concert_db
          MYSQL_USER=concert_user
          MYSQL_PASSWORD=concert_password
          SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/concert_db
          SPRING_DATASOURCE_USERNAME=concert_user
          SPRING_DATASOURCE_PASSWORD=concert_password
          EOF

      - name: üèóÔ∏è Build Docker images
        run: |
          docker-compose -f docker-compose.yml build --no-cache
        timeout-minutes: 15

      - name: üöÄ Start services
        run: |
          docker-compose -f docker-compose.yml up -d
          echo "Waiting for services to be ready..."
          sleep 30

      - name: üîç Check service health
        run: |
          # Check MySQL
          docker-compose exec -T mysql mysqladmin ping -h localhost -u root -prootpassword || exit 1
          echo "‚úÖ MySQL is healthy"
          
          # Check Backend
          for i in {1..30}; do
            if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
              echo "‚úÖ Backend is healthy"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done
          
          # Check Frontend
          for i in {1..30}; do
            if curl -f http://localhost:3000 2>/dev/null; then
              echo "‚úÖ Frontend is healthy"
              break
            fi
            echo "Waiting for frontend... ($i/30)"
            sleep 2
          done

      - name: üß™ Run integration tests
        run: |
          # Test backend API endpoints
          echo "Testing backend endpoints..."
          
          # Health check
          curl -f http://localhost:8080/actuator/health || exit 1
          
          # Test registration
          curl -X POST http://localhost:8080/api/auth/register \
            -H "Content-Type: application/json" \
            -d '{"email":"test@example.com","password":"Test1234!","fullName":"Test User"}' \
            || exit 1
          
          echo "‚úÖ Backend API tests passed"
          
          # Test frontend
          echo "Testing frontend..."
          curl -f http://localhost:3000 || exit 1
          echo "‚úÖ Frontend is serving"

      - name: üìã Show service logs on failure
        if: failure()
        run: |
          echo "=== Backend Logs ==="
          docker-compose logs backend
          echo "=== Frontend Logs ==="
          docker-compose logs frontend
          echo "=== MySQL Logs ==="
          docker-compose logs mysql

      - name: üõë Stop services
        if: always()
        run: |
          docker-compose -f docker-compose.yml down -v

  # ========================================
  # AUTO-FIX: Create Issue if Tests Fail
  # ========================================
  create-issue-on-failure:
    name: Create Issue on Test Failure
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, docker-integration]
    if: failure()
    
    steps:
      - name: üìù Create GitHub Issue
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const branch = context.ref.replace('refs/heads/', '');
            const commit = context.sha.substring(0, 7);
            
            const issueTitle = `üî¥ CI Tests Failed - ${branch} (${commit})`;
            const issueBody = `## ‚ùå CI Pipeline Failed
            
            **Branch**: \`${branch}\`
            **Commit**: \`${commit}\`
            **Workflow Run**: [View Details](${runUrl})
            **Triggered by**: @${context.actor}
            
            ### Failed Jobs
            
            One or more CI jobs have failed. Please review the workflow logs for details:
            
            - Frontend Tests & Coverage
            - Backend Tests & Coverage  
            - Docker Integration Tests
            
            ### Next Steps
            
            1. üìä Check coverage reports in workflow artifacts
            2. üîç Review failed test logs
            3. üîß Fix failing tests or improve coverage
            4. üì§ Push fixes and re-run CI
            
            ### Coverage Requirements
            
            - Frontend Branches: ${process.env.FRONTEND_COVERAGE_THRESHOLD}%
            - Backend Branches: ${process.env.BACKEND_COVERAGE_THRESHOLD}%
            
            ---
            
            **Auto-generated by GitHub Actions** ü§ñ
            `;
            
            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'ci-failure'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes(branch) && issue.title.includes(commit)
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['ci-failure', 'automated', 'bug']
              });
              console.log('‚úÖ Created issue for CI failure');
            } else {
              console.log('‚ÑπÔ∏è Issue already exists for this failure');
            }

  # ========================================
  # SUCCESS: Update Status Badge
  # ========================================
  update-status:
    name: Update Status Badge
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, docker-integration]
    if: success()
    
    steps:
      - name: ‚úÖ All tests passed
        run: |
          echo "üéâ All CI tests passed successfully!"
          echo "‚úÖ Frontend tests: PASSED"
          echo "‚úÖ Backend tests: PASSED"
          echo "‚úÖ Docker integration: PASSED"
